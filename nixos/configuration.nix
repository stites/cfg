# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, nixpkgs, ... }:

let
  pinnedKernelPackages = pkgs.linuxPackages_4_19;
in

{
  nixpkgs.config.allowUnfree = true;

  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix # AUTOGENERATED
      ./tinc.nix                   # WILL ERROR: too much sensitive information to include
      ./wireless.nix               # WILL ERROR: too much sensitive information to include
    ];

  # add i915 to be lazy-loaded by xserver
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "sd_mod" "sdhci_pci" "i915" ];
  boot.initrd.kernelModules = [ "acpi" "fb" ];
  boot.loader.grub.configurationLimit = 30;

  # make nvidia available
  # boot.extraModulePackages = [ pinnedKernelPackages.nvidia_x11 ];
  boot.extraModulePackages = [ pinnedKernelPackages.wireguard ];

  hardware.enableAllFirmware = true;
  hardware.cpu.intel.updateMicrocode = true;
  # hardware.opengl = {
  #   driSupport32Bit = true;
  #   extraPackages = with pkgs; [ vaapiIntel ];
  # };

  # Enable sound.
  sound.enable = true;
  hardware.pulseaudio.enable = true;
  hardware.pulseaudio.systemWide = false;

  # hardware.nvidiaOptimus.disable = true;
  # hardware.opengl.extraPackages   = [      pkgs.linuxPackages.nvidia_x11.out ];
  # hardware.opengl.extraPackages32 = [ pkgs_i686.linuxPackages.nvidia_x11.out ];
  boot.blacklistedKernelModules = ["nouveau" "mei_me"];
  boot.kernelPackages = pinnedKernelPackages;

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.efiSysMountPoint = "/boot";
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.timeout = 8;
  boot.loader.grub.useOSProber = true;

  # Select internationalisation properties.
  i18n = {
    #consoleFont = "Lat2-Terminus16";
    #consoleKeyMap = "colemak";
    consoleUseXkbConfig = true;
    inputMethod = {
      enabled = "ibus";
      ibus.engines = with pkgs.ibus-engines; [
        table
        table-others # LaTeX support
        m17n
        uniemoji # ibus 1.5.14 has emoji support : P
      ];
    };
    defaultLocale = "en_US.UTF-8";
  };

  # Set time and location
  time.timeZone = "US/Eastern";
  services.geoclue2.enable = false;
  services.gnome3.gnome-keyring.enable = true;
  services.localtime.enable = false;
  services.tlp.enable = true;

  # List packages installed in system profile. To search, run:
  environment.systemPackages = with pkgs; [
    cracklib gcc coreutils-full pstree tree killall gnumake binutils wget pinnedKernelPackages.bpftrace

    powertop xorg.xbacklight

    tmux vim neovim neovim-remote

    dmenu albert rxvt_unicode-with-plugins networkmanagerapplet

    openssl.dev zlib.dev

    ranger xfce.thunar

    lvm2 cryptsetup

    arandr autorandr

    chromium firefox slack signal-desktop
    wireguard wireguard-tools

    (haskellPackages.ghcWithPackages (self: [
      self.mtl
      self.xmonad
      self.xmonad-contrib
      self.xmonad-extras
      self.taffybar
      self.cabal-install
    ]))
  ];

  environment.pathsToLink = [
    # Needed for GTK themes
    "/share"
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.gnupg = {
    agent = {
      enable = true;
      enableSSHSupport = true;
      enableExtraSocket = false;
      enableBrowserSocket = false;
    };
    dirmngr.enable = true;
  };

  # Enable various networking daemons
  services.openssh.enable = true;
  services.sshguard.enable = false;
  services.dnscrypt-proxy.enable = false;

  networking = {
    hostName = "grothendieck";
    nameservers = ["1.1.1.1" "8.8.8.8"];

    firewall = {
      enable = false;
      allowPing = true;
      pingLimit = "--limit 60/minute --limit-burst 5";
      allowedTCPPorts      = [ 22 1337 655 ];
      allowedUDPPortRanges = [
        { from = 8000;  to = 8010; } # web servers
        { from = 60000; to = 60050; } # mosh
        { from = 655;   to = 656; } # tinc
        # 655 # tinc
      ];
      trustedInterfaces = [ "tun" ];
    };

    networkmanager.enable = true;
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  security.sudo = {
    enable = true;
    wheelNeedsPassword = false;
  };

  # Enable UPower, which is used by taffybar
  services.upower.enable = true;
  systemd.services.upower.enable = true;
  systemd.services.acpid.enable = true;

  # dbus for xmonad
  services.dbus.packages = [ pkgs.gnome3.dconf ];
  # urxvt daemons for urxvtc connections (lower memory overhead)
  # services.urxvtd.enable = true;

  # Enable the X11 windowing system.
  services.xserver = {
    enable = true;
    autorun = false;
    layout = "us";
    xkbVariant = "colemak";
    xkbOptions = "ctrl:nocaps";
    libinput.enable = true;
    multitouch.enable = true;
    videoDrivers = [ "mesa" ]; # "intel" ]; # "nvidia" ];
    deviceSection = ''
      Option "Backlight"  "intel_backlight"
    '';
    useGlamor = true;
    desktopManager.default = "none";
    desktopManager.xterm.enable = false;
    windowManager = {
      default = "xmonad";
      xmonad = {
        enable = true;
        extraPackages = hpkgs: [
          hpkgs.taffybar
          hpkgs.xmonad-contrib
          hpkgs.xmonad-extras
        ];
      };
    };
    displayManager.slim.enable = true;
    displayManager.slim.defaultUser = "stites";
    displayManager.slim.autoLogin = true;
    displayManager.sessionCommands = ''
      export GTK_DATA_PREFIX=${config.system.path}
      export GTK_PATH=${config.system.path}/lib/gtk-3.0:${config.system.path}/lib/gtk-2.0
      export XCURSOR_PATH=~/.icons:~/.nix-profile/share/iconts:/var/run/current-system/sw/share/iconts
      ${pkgs.xorg.xset}/bin/xset r rate 220 50
    '';
  };

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.stites = {
    isNormalUser = true;
    home = "/home/stites";
    description = "Sam Stites";
    extraGroups = [ "wheel" "networkmanager" ];
  };

  nix =
    let
      superusers = [ "@wheel" "root" ];
    in
    {
      allowedUsers = superusers;
      trustedUsers = superusers;
    };

  fonts = {
    fontconfig.enable = true;
    enableFontDir = true;
    enableGhostscriptFonts = true;
    fonts = with pkgs; [
      fira
      fira-code
      fira-mono
      font-droid
      inconsolata
      ubuntu_font_family
      nerdfonts
      libre-caslon
      libertinus
    ];
  };
  nixpkgs.config.dmenu.enableXft = true;
  nixpkgs.config.firefox = {
    enableGoogleTalkPlugin = true;
    enabledAdobeFlash = true;
    enabledAdobeFlashDRM = true;
    jre = false;
    icedtea = true;
  };

  nixpkgs.overlays = [
    (self: super: {
      taffybar =
        let
          inherit (self.haskell.lib) addBuildDepend;
          hpkgs = pkgs.haskell.packages.ghc822.extend (self: super: {
            ListLike = addBuildDepend super.ListLike self.semigroups;
            gi-glib  = super.gi-glib.override  { haskell-gi-overloading = self.haskell-gi-overloading_0_0; };
            gi-cario = super.gi-cario.override { haskell-gi-overloading = self.haskell-gi-overloading_0_0; };
            gi-xlib  = super.gi-xlib.override  { haskell-gi-overloading = self.haskell-gi-overloading_0_0; };
          });
          taffybar-unwrapped = super.taffybar.override { inherit (hpkgs) ghcWithPacakges; };
        in
          taffybar-unwrapped.overrideAttrs (drv: {
            nativeBuildInputs = drv.nativeBuildInputs or [] ++ [ self.makeWrapper ];
            buildCommand = drv.buildCommand + ''
              sed -i "2iexport GDK_PIXBUF_MODULE_FILE=${pkgs.librsvg.out}/lib/gdk-puxbuf-2.0/2.10.0/loaders.cache" $out/bin/taffybar
            '';
          });
    })
  ];


  security.sudo.configFile = ''
  '';


  # This value determines the NixOS release with which your system is to be
  # compatible, in order to avoid breaking some software such as database
  # servers. You should change this only after NixOS release notes say you
  # should.
  system.stateVersion = "18.09"; # Did you read the comment?
}
