#!/bin/bash

# ========================================================= #
# beautify the terminal                                     #
# ========================================================= #

#HOSTNAME="MacAir"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

dynamic_prompt (){
  local BASE="${BRIGHT_CYAN}@"
  local ENDING=""
  if [ ! -z "${git_branch}" ]; then
    ENDING="${YELLOW}\W ${CYAN}${git_branch}${RED}${git_dirty} ${RESET}"
  else
    ENDING="${CYAN}\W ${RESET}"
  fi
  # looks like we could just invoke functions in PS1 itself without having to use the
  # PROMPT_COMMAND
  PS1="$(task +in +PENDING count) ${venv_prompt}${BASE} ${ENDING}"
}

if [ "$color_prompt" = yes ]; then
    #PS1="${BRIGHT_YELLOW}@${BRIGHT_BLUE}\W${BRIGHT_VIOLET}~ ${RESET}"
    # PS1="${BRIGHT_CYAN}@ ${CYAN}\W ${RESET}"
    #PS1="${BRIGHT_CYAN}@ ${YELLOW}\W ${CYAN}${git_branch}${RED}${git_dirty} ${RESET}"
    if [[ $PROMPT_COMMAND != *" dynamic_prompt;"* ]]; then
      # assuming that $PROMPT_COMMAND ends in ';'
      PROMPT_COMMAND="$PROMPT_COMMAND dynamic_prompt;"
    fi
else
    PS1="[\u@\h:\W]\$ "
fi
unset color_prompt force_color_prompt

# ========================================================= #
# Mac commands                                              #
# ========================================================= #
safe_path_add ~/.bin

alias subl='open -a "Sublime Text"'
alias displayType='ioreg -lw0 | grep "EDID" | sed "/[^<]*</s///" | xxd -p -r | strings -6'

# fix brew installed caveats:
# LDFLAGS:  -L/usr/local/opt/readline/lib
# CPPFLAGS: -I/usr/local/opt/readline/include
safe_path_add /usr/local/opt/coreutils/libexec/gnubin
safe_path_add /Applications/Postgres.app/Contents/Versions/9.4/bin

# ===========================
# haskell stuff : from https://twdkz.wordpress.com/2015/02/25/haskell-on-yosemite-osx-10-10/
# ===========================

# Add GHC 7.10.2 to the PATH, via https://ghcformacosx.github.io/
export GHC_DOT_APP="/Applications/ghc-7.10.2.app"
if [ -d "$GHC_DOT_APP" ]; then
  export PATH="${HOME}/.local/bin:${HOME}/.cabal/bin:${GHC_DOT_APP}/Contents/bin:${PATH}"
fi

# later steps in the build processes need to find libraries
# like xcb-shm via package config. Tell pkg-config
# where they are.
export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig
export ANDROID_HOME=/usr/local/opt/android-sdk
