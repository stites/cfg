#!/bin/bash

# ========================================================= #
# beautify the terminal                                     #
# ========================================================= #

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

#if [ -n "$force_color_prompt" ]; then
#    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#        # We have color support; assume it's compliant with Ecma-48
#        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
#        # a case would tend to support setf rather than setaf.)
#        color_prompt=yes
#    else
#        color_prompt=
#    fi
#fi

dynamic_prompt (){
  local BASE="${BRIGHT_CYAN}@"
  local ENDING=""
  if [ ! -z "${git_branch}" ]; then
    ENDING="${YELLOW}\W ${CYAN}${git_branch}${RED}${git_dirty} ${RESET}"
  else
    ENDING="${CYAN}\W ${RESET}"
  fi
  # looks like we could just invoke functions in PS1 itself without having to use the
  # PROMPT_COMMAND
  PS1="$(task +in +PENDING count) ${venv_prompt}${BASE} ${ENDING}"
}

if [ "$color_prompt" = yes ]; then
    if [[ $PROMPT_COMMAND != *" dynamic_prompt;"* ]]; then
      PROMPT_COMMAND="$PROMPT_COMMAND dynamic_prompt;"
    fi
else
    PS1="[\u@\h:\W]\$ "
fi
unset color_prompt force_color_prompt

